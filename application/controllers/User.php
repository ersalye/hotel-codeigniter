<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class User extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Vh_usr_model');
    } 

    /*
     * Listing of vh_usr
     */
    function index()
    {
		
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('User/index?');
        $config['total_rows'] = $this->Vh_usr_model->get_all_vh_usr_count();
        $this->pagination->initialize($config);

        $data['vh_usr'] = $this->Vh_usr_model->get_all_vh_usr($params);
        
        $data['_view'] = 'vh_usr/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new vh_usr
     */
    function dashbord()
    {
		$errors         = array();      // array to hold validation errors
		$data           = array();      // array to pass back data
		
	if (empty($_POST['password']))
        $errors['password'] = 'Name is required.';

    if (empty($_POST['email']))
        $errors['email'] = 'Email is required.';
		
    if ( ! empty($errors)) {
        $data['success'] = false;
        $data['errors']  = $errors;
    } else {
		
	$data['success'] = true;
        $data['message'] = "okay";
    }

    // return all our data to an AJAX call
    echo json_encode($data); 
     //   	exit;
	}
	function email_check()
    {
		$params = $_POST['b_email'];
		
		echo $vh_usr_id = $this->Vh_usr_model->email_exists($params);
      
     //   	exit;
	}
	function addajax()
    {
			
	$errors         = array();      // array to hold validation errors
	$data           = array();      // array to pass back data

// validate the variables ======================================================
    // if any of these variables don't exist, add an error to our $errors array

    if (empty($_POST['name']))
        $errors['name'] = 'Name is required.';

    if (empty($_POST['email']))
        $errors['email'] = 'Email is required.';

    if (empty($_POST['mobile']))
        $errors['mobile'] = 'Superhero alias is required.';
		
	if (empty($_POST['date']))
        $errors['date'] = 'Superhero alias is required.';
	
	if (empty($_POST['password']))
        $errors['password'] = 'Superhero alias is required.';
	
	

// return a response ===========================================================
    if ( ! empty($errors)) {

     
        $data['success'] = false;
        $data['errors']  = $errors;
    } else {
		$pass = $this->input->post('password');
		$params = array(
				'NAME' => $this->input->post('name'),
				'EMAIL' => $this->input->post('email'),
				'MOBILENO' => $this->input->post('mobile'),
				'PASSWRD' => md5($pass),
				'DOB' => $this->input->post('date'),
				'GENDER' => $this->input->post('gender'),
				
            );
            
            $vh_usr_id = $this->Vh_usr_model->add_vh_usr($params);
      
        $data['success'] = true;
        $data['message'] = $vh_usr_id;
    }

    // return all our data to an AJAX call
    echo json_encode($data);

	
	}	
	function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'MOB_AUTHENTICATED' => $this->input->post('MOB_AUTHENTICATED'),
				'EMAIL_AUTHENTICATED' => $this->input->post('EMAIL_AUTHENTICATED'),
				'NAME' => $this->input->post('NAME'),
				'EMAIL' => $this->input->post('EMAIL'),
				'MOBILENO' => $this->input->post('MOBILENO'),
				'PASSWRD' => $this->input->post('PASSWRD'),
				'DOB' => $this->input->post('DOB'),
				'MARRAGESTATUS' => $this->input->post('MARRAGESTATUS'),
				'GENDER' => $this->input->post('GENDER'),
				'REFCODE' => $this->input->post('REFCODE'),
				'REFBY' => $this->input->post('REFBY'),
				'LOGINRETYCOUNT' => $this->input->post('LOGINRETYCOUNT'),
				'LOGINLOCKDATE' => $this->input->post('LOGINLOCKDATE'),
				'LASTLOGIN' => $this->input->post('LASTLOGIN'),
				'USRSTS' => $this->input->post('USRSTS'),
				'OTP' => $this->input->post('OTP'),
				'USR_KEY' => $this->input->post('USR_KEY'),
				'PROFILE_PICTURE' => $this->input->post('PROFILE_PICTURE'),
				'LINKEDIN_ID' => $this->input->post('LINKEDIN_ID'),
            );
            
            $vh_usr_id = $this->Vh_usr_model->add_vh_usr($params);
            redirect('user/index');
        }
        else
        {            
            $data['_view'] = 'vh_usr/add';
            $this->load->view('layouts/main',$data);
        }
    }  
	function home()
    {
       // $data['_view'] = 'dashboard';
        $this->load->view('hoomev2');
    }

    /*
     * Editing a vh_usr
     */
    function edit($ID)
    {   
        // check if the vh_usr exists before trying to edit it
        $data['vh_usr'] = $this->Vh_usr_model->get_vh_usr($ID);
        
        if(isset($data['vh_usr']['ID']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'MOB_AUTHENTICATED' => $this->input->post('MOB_AUTHENTICATED'),
					'EMAIL_AUTHENTICATED' => $this->input->post('EMAIL_AUTHENTICATED'),
					'NAME' => $this->input->post('NAME'),
					'EMAIL' => $this->input->post('EMAIL'),
					'MOBILENO' => $this->input->post('MOBILENO'),
					'PASSWRD' => $this->input->post('PASSWRD'),
					'DOB' => $this->input->post('DOB'),
					'MARRAGESTATUS' => $this->input->post('MARRAGESTATUS'),
					'GENDER' => $this->input->post('GENDER'),
					'REFCODE' => $this->input->post('REFCODE'),
					'REFBY' => $this->input->post('REFBY'),
					'LOGINRETYCOUNT' => $this->input->post('LOGINRETYCOUNT'),
					'LOGINLOCKDATE' => $this->input->post('LOGINLOCKDATE'),
					'LASTLOGIN' => $this->input->post('LASTLOGIN'),
					'USRSTS' => $this->input->post('USRSTS'),
					'OTP' => $this->input->post('OTP'),
					'USR_KEY' => $this->input->post('USR_KEY'),
					'PROFILE_PICTURE' => $this->input->post('PROFILE_PICTURE'),
					'LINKEDIN_ID' => $this->input->post('LINKEDIN_ID'),
                );

                $this->Vh_usr_model->update_vh_usr($ID,$params);            
                redirect('user/index');
            }
            else
            {
                $data['_view'] = 'vh_usr/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The vh_usr you are trying to edit does not exist.');
    } 

    /*
     * Deleting vh_usr
     */
    function remove($ID)
    {
        $vh_usr = $this->Vh_usr_model->get_vh_usr($ID);

        // check if the vh_usr exists before trying to delete it
        if(isset($vh_usr['ID']))
        {
            $this->Vh_usr_model->delete_vh_usr($ID);
            redirect('user/index');
        }
        else
            show_error('The vh_usr you are trying to delete does not exist.');
    }
    
}
